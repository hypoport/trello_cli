
function! OpenTrelloCard()
  let a:line = getline('.')
  if match(a:line, "^\* <.*>") != -1
    let a:link = substitute(a:line, '^.*<\([^>]*\)>.*$', '\1', 'g')
    call system ('browser_open_url -f "https://trello.com/c/' . a:link . '"')
  elseif match(a:line, "^# <.*>") != -1
    let a:link = substitute(a:line, '^.*<\([^>]*\)>.*$', '\1', 'g')
    call system ('browser_open_url -f "https://trello.com/b/' . a:link . '"')
  endif
endfunction

function! AddTrelloCard()
  let a:line = getline('.')
  if match(a:line, "^## <[^>]*>") != -1
    let a:link = substitute(a:line, '^## <\([^>]*\)>.*$', '\1', 'g')
    execute('silent !clear;clitrello add_card ' . a:link)
    execute('redraw!')
  endif
endfunction

function! ArchiveTrelloCard()
  let a:line = getline('.')
  if match(a:line, "^\* <[^>]*>") != -1
    let a:link = substitute(a:line, '^\* <\([^>]*\)>.*$', '\1', 'g')
    execute('silent !clear;clitrello archive_card ' . a:link)
    execute('redraw!')
  endif
endfunction

function! RenameTrelloCard()
  let a:line = getline('.')
  if match(a:line, "^\* <[^>]*>") != -1
    let a:link = substitute(a:line, '^\* <\([^>]*\)>.*$', '\1', 'g')
    execute('silent !clear;clitrello rename_card ' . a:link)
    execute('redraw!')
  endif
endfunction

function! OpenTrelloBoard()
  let a:line = getline('.')
  if match(a:line, "^# <.*>") != -1
    let a:link = substitute(a:line, '^.*<\([^>]*\)>.*$', '\1', 'g')
    execute('%! clitrello format_board ' . a:link)
    execute('redraw!')
  endif
endfunction

function! OpenTrelloAllBoards()
  execute('%! clitrello format_my_boards')
  execute('redraw!')
endfunction

function! UpdateBuffer()
  let a:line = getline(1)
  if match(a:line, "^# <[^>]*>") != -1
    let a:link = substitute(a:line, '^# <\([^>]*\)>.*$', '\1', 'g')
    if a:link == "my_cards"
      call ReadMyCards()
    else
      let save_pos = getpos(".")
      execute('%! clitrello format_board ' . a:link)
      call setpos('.', save_pos)
      execute('redraw!')
      unlet save_pos
    endif
  endif
endfunction


" This callback will be executed when the entire command is completed
function! BackgroundCommandClose(channel)
  let save_pos = getpos(".")
  execute '%! cat ' . g:backgroundCommandOutput
  call setpos('.', save_pos)
  execute('redraw!')
  execute('set filetype=markdown')
  unlet save_pos
  unlet g:backgroundCommandOutput
endfunction

function! RunBackgroundCommand(command)
  " Make sure we're running VIM version 8 or higher.
  if v:version < 800
    " run task sync
    let g:save_pos = getpos(".")
    % ! clitrello my_cards | clitrello format_my_cards
    call setpos('.', save_pos)
    " echoerr 'RunBackgroundCommand requires VIM version 8 or higher'
    return
  endif

  if exists('g:backgroundCommandOutput')
    echo 'Already running task in background'
  else
    echo 'Running task in background'
    " Launch the job.
    " Notice that we're only capturing out, and not err here. This is because, for some reason, the callback
    " will not actually get hit if we write err out to the same file. Not sure if I'm doing this wrong or?
    let g:backgroundCommandOutput = tempname()
    call job_start(a:command, {'close_cb': 'BackgroundCommandClose', 'out_io': 'file', 'out_name': g:backgroundCommandOutput})
  endif
endfunction

function! ReadMyCards()
  silent ! pass foo/foo
  call RunBackgroundCommand("clitrello format_my_cards")
endfunction

nnoremap <Leader>u :call UpdateBuffer()<CR>
nnoremap <Leader>e :call RenameTrelloCard()<CR>
nnoremap <Leader>c :call ArchiveTrelloCard()<CR>
nnoremap <Leader>a :call AddTrelloCard()<CR>

nnoremap <Leader>k :call ReadMyCards()<CR>
nnoremap <Leader>l :call OpenTrelloCard()<CR>
nnoremap <Leader>L :call OpenTrelloBoard()<CR>
nnoremap <Leader>m :call OpenTrelloAllBoards()<CR>

set filetype=markdown

if ! empty($custom_vimrc)
  let g:custom_vimrc=$custom_vimrc
  nnoremap <Leader>r :exec('source ' . g:custom_vimrc)<CR>
endif

