#!/usr/bin/env bash
set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

# https://developers.trello.com/v1.0/reference#cards-nested-resource
# &card_limit=100

while getopts "a:h?" options; do case $options in
  a) a="$OPTARG" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }

: ${a:="default for var a"}
: ${member:="me"}
: ${output:=""}

if [[ "$#" -eq 0 ]];then
  :

##================================

elif [ "$1" = "board_by_id" ];then shift
  board_id=$1; shift
  output="$(curl -s "https://trello.com/1/boards/${board_id}/lists?key=${trello_key}&token=${trello_token}\
&filter=open\
&fields=all\
&cards=open\
&card_fields=all\
")"

elif [ "$1" = "boards_by_member" ];then shift
  output="$(curl -s "https://trello.com/1/members/${member}/boards?key=${trello_key}&token=${trello_token}\
&filter=open\
&lists=open\
")"

elif [ "$1" = "boards_short_json" ];then shift
  output="$(jq -c 'map({id,name,shortLink,lists:(.lists|map({id,name}))})')"

elif [ "$1" = "boards_to_markdown" ];then shift
  output="$(jq -r 'map("# <\(.shortLink)> \(.name)")[]')"


elif [ "$1" = "format_board" ];then shift
  board_id=$1; shift
  : ${board_name:="$@"}
  : ${organization_members=""}
  board="$($0 board ${board_id})"
  echo "# <${board_id}> ${board_name}"
  if [[ -n "$organization_members" ]]; then
    board="$( echo "$board" | jq \
      --argjson members "${organization_members}" \
      "\
map(.cards=(.cards|sort_by(.pos)|map(\
.idMembers=(.idMembers|map(. as \$memberId|\$members|map(select(.id==\$memberId)|.initials)[] )))))\
" \
      )"
  else
    board="$( echo "$board" | jq \
      'map(.cards=(.cards|sort_by(.pos)|map(.idMembers=[(.idMembers|length|tostring)])))' \
      )"
  fi
  echo "$board" \
    | jq "\
map(\
.formatted=[]|\
.formatted+=[\
  \"\\n## <\" + .id + \"> \" + .name\
]|\
.formatted+=[\
  (.cards[]|[\
      \"* <\" + .shortLink + \">  \" \
      + (.due//\"\"|sub(\"T.*$\";\" \")) \
      + \"[\" + (.idMembers|join(\",\")) + \"] \" \
      + (if (.badges.checkItems>0) then ((.badges.checkItemsChecked|tostring) +\"/\" +(.badges.checkItems|tostring) +\" \") else \"\" end ) \
      + (if (.labels|length)>0 then \"(\" + (.labels|map(.color)|join(\",\"))+ \") \" else \"\" end) \
      + \"\`\"  + .name + \"\`\" \
    ]|.[] \
  )\
]\
)\
" \
    | jq -r 'map(.formatted)|flatten|.[]'
  echo

##================================

elif [ "$1" = "cards_idmembers_to_members" ];then shift
  : ${organization_members="[]"}
  output="$(jq --argjson members "${organization_members}" \
    "map(.members=(.idMembers|map(. as \$memberId|\$members|map(select(.id==\$memberId)|.initials)[])))" \
  )"

elif [ "$1" = "cards_short_json" ];then shift
  output="$(jq -c 'map({id,name,shortLink})')"

elif [ "$1" = "cards_filter_hidden" ];then shift
  output="$(jq "map(select(.actions|contains([{data:{text:\"hide\"}}])|not))")"

elif [ "$1" = "cards_by_member" ];then shift
  : ${card_fields:="due,name,shortLink,shortUrl,idBoard,idList"}
  output="$(curl -s "https://trello.com/1/members/${member}/cards?key=${trello_key}&token=${trello_token}\
&visible=open\
&members=true\
&member_fields=initials\
&actions=commentCard\
&fields=${card_fields}\
")"

elif [ "$1" = "cards_grouped_to_markdown" ];then shift
  output="$(jq "map(\
.formatted=[]| \
.formatted+=[ \"\\n# <\" + .boardLink + \">    \" + .boardName ] | \
.formatted+=[ \
  (.lists[]| \
    [ \"## <\" + .listId + \"> \" + .listName, \
      ( .cards[] | \
        \"* <\" + .shortLink + \">      \" \
        + \"[\" + (.members|join(\",\")) + \"] \" \
        + (.due//\"\"|sub(\"T.*$\";\" \")) \
        + .name \
      ) \
    ]|.[] \
  ) \
] \
)" \
  | jq -r "map(.formatted)|flatten|.[]"
  )"

elif [ "$1" = "cards_group_by_board" ];then shift
  : ${boards="[]"}
  output="$(jq --argjson boards "${boards}" \
"\
.|group_by(.idBoard)|map(\
  .[0].idBoard as \$boardId\
  |{\
  boardId:\$boardId,\
  boardName:(\$boards|map(select(.id==\$boardId)|{name})|first|.name),\
  boardLink:(\$boards|map(select(.id==\$boardId)|{shortLink})|first|.shortLink),\
  lists:(.|group_by(.idList)|map(\
    .[0].idList as \$listId |\
    {\
      listId:\$listId,\
      listName:(\
        \$boards|map(select(.id==\$boardId))|first|.lists//[]\
        |map(select(.id==\$listId))[0].name\
      )\
      ,\
      cards:(\
        map(\
        . \
        )\
        |sort_by(.due)\
      )\
    }\
  ))\
})"  )"
          # del(.idBoard)\
          # |del(.idList)\
          # |del(.id)\
          # |.actions=(.actions|map({text:(.data.text),date,memberCreator:(.memberCreator.username)}))\
          # |.members=[.members[]?|.initials?] \

##================================

elif [ "$1" = "list_history" ];then shift
  list_id="$1"; shift
  output="$(curl -s "https://trello.com/1/lists/${list_id}/cards?key=${trello_key}&token=${trello_token}\
&fields=closed,shortUrl,name\
&filter=all\
" \
| jq -c 'sort_by(.closed)|map({closed,shortUrl,name})[]'
  )"

##================================

elif [ "$1" = "add_card" ];then shift
  list_id="$1"; shift
  card_name="$(echo "$@"|urlencode)"
  #TODO shift all
  if [[ -z "${card_name}" ]];then
    read -e -p "enter new card name: " card_name
    card_name="$(echo "$card_name"|urlencode)"
  fi
  curl -s -XPOST "https://trello.com/1/lists/${list_id}/cards?key=${trello_key}&token=${trello_token}\
&name=${card_name}\
"

elif [ "$1" = "del_card" ];then shift
  card_id="$1"; shift
  curl -s -XDELETE "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

elif [ "$1" = "archive_card" ];then shift
  card_id="$1"; shift
  curl -s -XPUT "https://trello.com/1/cards/${card_id}/closed?key=${trello_key}&token=${trello_token}\
&value=true\
"

elif [ "$1" = "card_name" ];then shift
  card_id="$1"; shift
  output="$(curl -s "https://trello.com/1/cards/${card_id}/name?key=${trello_key}&token=${trello_token}")"

elif [ "$1" = "rename_card" ];then shift
  card_id="$1"; shift
  : ${card_name:="$@"}
  #TODO shift all
  if [[ -z "${card_name}" ]];then
    : ${old_name:="$($0 card_name ${card_id} | jq -r ._value )"}
    read -i "${old_name}" -e -p "enter new card name: " card_name
  fi
  card_name="$(echo "${card_name}" | urlencode)"
  curl -s -XPUT \
    -d "name=${card_name}" \
    "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

##================================

elif [ "$1" = "my_organizations" ];then shift
  output="$(curl -s "https://trello.com/1/members/${member}/organizations?key=${trello_key}&token=${trello_token}\
&fields=name,displayName\
" | jq -c '.[]' )"

elif [ "$1" = "organization_members" ];then shift
  organization_id=$1; shift
  output="$(curl -s "https://trello.com/1/organizations/${organization_id}/members?key=${trello_key}&token=${trello_token}\
&fields=initials,username,fullName\
")"

##================================

else
  echo "unknown command: $@" >&2
  exit 1

fi

if [[ "$#" -ne 0 ]];then
  # echo "execute $@" >&2
  echo "$output" | $0 $@
else
  echo "$output"
fi


