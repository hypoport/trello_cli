#!/usr/bin/env bash
set -o errexit  # abort when any commands exits with error
set -o pipefail # abort when any command in a pipe exits with error
set -o nounset  # abort when any unset variable is used
set -o noglob # prevent bash from expanding glob
set -o errtrace # inherits trap on ERR in function and subshell
trap 'echo status:$? line:$LINENO line:$BASH_LINENO command:"$BASH_COMMAND" functions:$(printf " %s" ${FUNCNAME[@]:-})' ERR
if [[ "${trace:=0}" -eq 1 ]];then
  PS4='${LINENO}: '
  set -x
  export trace
fi

# https://developers.trello.com/v1.0/reference#cards-nested-resource
# https://developers.trello.com/docs/getting-started-custom-fields
# &card_limit=100

while getopts "h?" options; do case $options in
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }

: ${member:="me"}
: ${output:=""}
: ${filter:="visible"} # all, closed, none, open, visible

export member
export filter

if [[ "$#" -eq 0 ]];then
  :
  ${0} help

elif [[ "$1" == "help" ]];then shift ##
  cat ${0} \
    | grep -A5 '^elif.*#\{2\}' \
    | grep -E '(^elif|shift$)' \
    | sed -e 's/^elif *\[\{1,\} *"\$1" *=\{1,\} *"\([^"]*\)" *\]\{1,\} *; *then *shift *\(#\{0,\}\) *\(.*\)$/\1 \2 \3/g' \
    | sed -e 's/^\( *\)\([^;]*\); *shift$/\1\2/g' \
    || true

elif [ "$1" = "boards" ];then shift ##
  if [[ ! -r "${trello_cache_dir}/boards.json" ]];then
      curl -s "https://trello.com/1/members/${member}/boards?key=${trello_key}&token=${trello_token}\
&filter=open\
&lists=open\
&fields=all\
&list_fields=all\
"  > ${trello_cache_dir}/boards.json
  fi
  output="$(jq -c '.' ${trello_cache_dir}/boards.json)"

elif [ "$1" = "board" ];then shift ##
  board_pattern=$1; shift
  board_id="$($0 board_match_to_id ${board_pattern})"
  output="$(
    $0 boards \
      | jq -c \
      --arg board_id "${board_id}" \
      'map(select(.id==$board_id))|first'
    )"
 
elif [ "$1" = "board_match_to_id" ];then shift ##
  board_pattern=$1; shift
  matched_id="$(
    $0 boards \
      | jq -r \
        --arg board_pattern "${board_pattern}" \
        'map(select(.id==$board_pattern)|.id)[]'
    )"
  if [[ -z "${matched_id}" ]];then
    matched_id="$(
      $0 boards \
        | jq -r \
          --arg board_pattern "${board_pattern}" \
          'map(select(.shortLink==$board_pattern)|.id)[]'
      )"
  fi
  if [[ -z "${matched_id}" ]];then
    matched_id="$(
      $0 boards \
        | jq -r \
          --arg board_pattern "${board_pattern}" \
          'map(select(.name|gsub(" ";"_")|test($board_pattern;"i"))|.id)[]'
      )"
  fi
  if [[ -z "${matched_id}" ]] || [[ "${matched_id}" =~ $'\n' ]];then
    echo "no or multiple board id matches: ${matched_id}" >&2
    exit 1
  fi
  output="${matched_id}"

elif [ "$1" = "board_alias" ];then shift
  board_pattern=$1; shift
  output="$(
    $0 board ${board_pattern} \
      | jq -r '.name|gsub(" ";"_")|.[0:15]' \
      | tr '[:upper:]' '[:lower:]'
  )"

elif [ "$1" = "board_lists" ];then shift
  output="$(
    $0 boards \
      | jq -r 'map("\(.shortLink) \(.name) (l:\(.lists|length))")[]'
    )"

elif [ "$1" = "list_lists" ];then shift
  board_pattern="$1";shift
  output="$(
    $0 board ${board_pattern}\
      | jq -r "[.]|map(\
.formatted=[]| \
.formatted+=[ .shortLink + \" \" + .name ] | \
.formatted+=[ \
  (.lists[]|[\"  \"+.id+\" \"+.name ]|.[]) \
] \
| .formatted+=[ \"\\n\" ] \
)|\
map(.formatted)|flatten|.[]\
" 
      )"

elif [ "$1" = "board_list_map" ];then shift ## used by trellowarrior
  board_pattern=$1; shift
  output="$( 
    $0 board ${board_pattern} \
      | jq -c '.lists|map({id,name})'
    )"

elif [ "$1" = "list_name_map" ];then shift ## used by trellowarrior
  output="$($0 boards | jq -c 'map(.id as $board_id|.lists|map({id,name,board_id:$board_id}))|flatten')"

elif [ "$1" = "list_name_to_id" ];then shift ##
  if [[ "$#" -eq 1 ]] && [[ "${1}" =~ ^[a-zA-Z0-9_-]*:[a-zA-Z0-9_-]*$ ]];then
    board_pattern="${1%:*}"
    list_pattern="${1#*:}"
    shift
  elif [[ "$#" -eq 2 ]];then
    board_pattern=$1;shift
    list_pattern=$1;shift
  fi
  output="$(
    $0 board ${board_pattern} \
      | jq -r \
      --arg list_pattern "${list_pattern}" \
      '.lists//[]|map(select(.name|gsub(" ";"_")|test($list_pattern;"i"))|.id)[]'
    )"

elif [ "$1" = "board_custom_fields" ];then shift ##
  board_pattern=$1; shift
  board_id="$($0 board_match_to_id ${board_pattern})"
  if [[ ! -r "${trello_cache_dir}/board_${board_id}_custom_fields.json" ]];then
    curl -s "https://trello.com/1/boards/${board_id}/customFields?key=${trello_key}&token=${trello_token}"  \
      > ${trello_cache_dir}/board_${board_id}_custom_fields.json
  fi
  output="$( jq '.' ${trello_cache_dir}/board_${board_id}_custom_fields.json)"

elif [ "$1" = "board_custom_field_id_by_name" ];then shift ##
  board_pattern=$1; shift
  field_name=$1; shift
  output="$(
    $0 board_custom_fields ${board_pattern} \
    | jq \
      --arg field_name "${field_name}" \
      -r \
      'map(select(.name==$field_name))|first|.id//null'
    )"

elif [ "$1" = "board_custom_field_prio_id_value" ];then shift ##
  board_pattern=$1; shift
  prio=$1; shift
  output="$(
    $0 board_custom_fields ${board_pattern} \
    | jq \
      --arg field_name "prio" \
      --arg value "${prio}" \
      -r \
      'map(select(.name==$field_name))|first|.options//[]|map(select(.value.text==$value))|first|.id//""'
    )"

elif [ "$1" = "board_prio_id_map" ];then shift ##
  board_pattern=$1;shift
  prio_H_idValue="$(clitrello board_custom_field_prio_id_value ${board_pattern} H)"
  prio_M_idValue="$(clitrello board_custom_field_prio_id_value ${board_pattern} M)"
  prio_L_idValue="$(clitrello board_custom_field_prio_id_value ${board_pattern} L)"
  output="$(
    jq -c -n \
      --arg prio_H_idValue "${prio_H_idValue}" \
      --arg prio_M_idValue "${prio_M_idValue}" \
      --arg prio_L_idValue "${prio_L_idValue}" \
      '{($prio_H_idValue):"H",($prio_M_idValue):"M",($prio_L_idValue):"L"}|del(."")'
    )"

elif [ "$1" = "cache_clear" ];then shift ##
  find ${trello_cache_dir} -type f -name "*.json" -delete

elif [ "$1" = "cache_show" ];then shift ##
  ls -1 ${trello_cache_dir}

elif [ "$1" = "cache_update" ];then shift ##
  ${0} boards | jq 'length'

elif [ "$1" = "cards" ];then shift ##
  board_pattern=$1; shift
  board_id="$($0 board_match_to_id ${board_pattern})"
  output="$(curl -s "https://trello.com/1/boards/${board_id}/cards?key=${trello_key}&token=${trello_token}\
&filter=open\
&fields=all\
&cards=${filter}\
&card_fields=all\
&members=true\
&member_fields=initials,username\
&checklists=all\
&customFieldItems=true\
" \
  | jq -c '.' \
)"

elif [ "$1" = "card" ];then shift ##
  card_id="$1"; shift
  output="$(curl -s "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}\
&actions=commentCard\
&checklists=all\
&fields=all\
&customFieldItems=true\
")"

elif [ "$1" = "my_cards" ];then shift ##
  # : ${card_fields:="due,name,shortLink,shortUrl,idBoard,idList,closed,dateLastActivity"}
  : ${card_fields:="all"}
  output="$(curl -s "https://trello.com/1/members/${member}/cards?key=${trello_key}&token=${trello_token}\
&filter=${filter}\
&members=true\
&member_fields=initials,username\
&actions=commentCard\
&fields=${card_fields}\
&checklists=all\
&customFieldItems=true\
")"

elif [ "$1" = "update_card_from_json" ];then shift ##
  line="$(cat -)"
  card_id="$(jq -r '.id' <<<"$line")"
  name="$(jq -r '.name|gsub("^ ";"")|gsub(" $";"")' <<<"$line")"
  board="$(jq -r '.board' <<<"$line")"
  list="$(jq -r '.list' <<<"$line")"
  tags="$(jq -r '.tags//""' <<<"$line")"
  due="$(jq -r '.due//""' <<<"$line")"
  priority="$(jq -r '.priority//""' <<<"$line")"

  idList="$($0 list_name_to_id "${board}:${list}")"
  idBoard="$($0 board_match_to_id ${board})"

  #idMembers
  #idLabels

  : ${limit:="60"}
  : ${wait_time:="10"}



  response="$(
    curl \
      -i -s \
      -XPUT \
      --data-urlencode "idBoard=${idBoard}" \
      --data-urlencode "idList=${idList}" \
      --data-urlencode "name=${name}" \
      --data-urlencode "due=${due}" \
      "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}" \
      )"

  headers="$(sed -n '1,/^$/p' <<<"${response}")"
  body="$(sed -n '/^$/,$p' <<<"${response}" | sed '1d')"

  read -r http_version status_code reason_phrase <<<"${headers}"

  if [[ "${status_code}" =~ ^409$ ]] && [[ "${body}" =~ "LOCK_TAKEN_ERROR" ]];then
    echo "LOCK TAKEN ERROR"
    exit 1
  fi

  rate_limit_remaining="$( 
    echo "${headers}" \
    | grep -i "x-rate-limit-api-token-remaining" \
    | awk -F':' '{print $2}' \
    | tr -d ' ' \
    | tr -d '\r' \
    || true \
  )"



  echo "rate_limit update card ${card_id}: ${rate_limit_remaining}"
  if [[ ${rate_limit_remaining} -lt ${limit} ]];then
    echo "rate limit is (${rate_limit_remaining}) below ${limit} wait ${wait_time}"
    sleep ${wait_time} 
  fi
  rate_limit_remaining="$( 
    $0 card_tags ${board} ${card_id} "${tags}"
    )"
  echo "rate_limit tags ${card_id}: ${rate_limit_remaining}"
  if [[ ${rate_limit_remaining} -lt ${limit} ]];then
    echo "rate limit is (${rate_limit_remaining}) below ${limit} wait ${wait_time}"
    sleep ${wait_time} 
  fi
  rate_limit_remaining="$( 
    $0 card_prio ${board} ${card_id} "${priority}"
    )"
  echo "rate_limit prio ${card_id}: ${rate_limit_remaining}"
  if [[ ${rate_limit_remaining} -lt ${limit} ]];then
    echo "rate limit is (${rate_limit_remaining}) below ${limit} wait ${wait_time}"
    sleep ${wait_time} 
  fi

elif [ "$1" = "check_rate" ];then shift
  rate_limit_remaining="$( 
    curl -i -s "https://trello.com/1/members/${member}/initials?key=${trello_key}&token=${trello_token}" \
      | grep -i "x-rate-limit-api-token-remaining" \
      | awk -F':' '{print $2}' \
      | tr -d ' ' \
      | tr -d '\r' \
      || true
  )"
  echo "${rate_limit_remaining}"

elif [ "$1" = "update_cards_from_json" ];then shift ##
  parallel -j1 -N1 --pipe "$0 update_card_from_json"

elif [ "$1" = "card_prio" ];then shift ##
  board_pattern="$1"; shift
  card_id="$1"; shift
  prio="$1"; shift
  custom_field_id="$($0 board_custom_field_id_by_name ${board_pattern} prio)"
  idValue="$($0 board_custom_field_prio_id_value ${board_pattern} "${prio}")"
  jq -n --arg idValue "${idValue}" '{idValue:$idValue}' \
  | curl -i -s -XPUT \
    -H "Content-Type: application/json" \
    --data-binary @- \
    "https://trello.com/1/card/${card_id}/customField/${custom_field_id}/item?key=${trello_key}&token=${trello_token}" \
  | grep -i "x-rate-limit-api-token-remaining" \
  | awk -F':' '{print $2}' \
  | tr -d ' ' \
  | tr -d '\r' \
  || true

elif [ "$1" = "card_tags" ];then shift ##
  board_pattern="$1";shift
  card_id="$1"; shift
  tags="$1"; shift
  custom_field_id="$($0 board_custom_field_id_by_name ${board_pattern} tags)"
  jq -n --arg tags "${tags}" '{value:{text:$tags}}' \
  | curl -i -s -XPUT \
    -H "Content-Type: application/json" \
    --data-binary @- \
    "https://trello.com/1/card/${card_id}/customField/${custom_field_id}/item?key=${trello_key}&token=${trello_token}" \
  | grep -i "x-rate-limit-api-token-remaining" \
  | awk -F':' '{print $2}' \
  | tr -d ' ' \
  | tr -d '\r' \
  || true

elif [ "$1" = "card_comment_vipe" ];then shift ##
  card_id="$1"; shift
  comment="$(echo | vipe )"
  output="$(
    curl -s \
      -X POST \
      --data-url "text=${comment}" \
      "https://trello.com/1/cards/${card_id}/actions/comments?key=${trello_key}&token=${trello_token}"
    )"

elif [ "$1" = "card_comment" ];then shift ##
  card_id="$1"; shift
  if [[ -n "$@" ]]; then
    comment="$@"
    shift $#
  else
    read -p 'enter comment: ' comment
  fi
  output="$(
    curl -s \
      -X POST \
      --data-url "text=${comment}" \
      "https://trello.com/1/cards/${card_id}/actions/comments?key=${trello_key}&token=${trello_token}"
    )"

elif [ "$1" = "card_show_comments" ];then shift ##
  card_id="$1"; shift
  output="$(
    curl -s \
      "https://trello.com/1/cards/${card_id}/actions?key=${trello_key}&token=${trello_token}\
&filter=commentCard\
" \
  | jq -c 'map(select(.type=="commentCard")|{id,date,member:((.memberCreator.initials//"")//""),text:(.data.text)})[]'
    )"
  # | jq -c 'map(select(.type=="commentCard")|{date,member:((.memberCreator.initials//"")//""),text:(.data.text)})[]'
# &filter=commentCard,updateCard\
  # | jq -c 'map(select(.type=="commentCard")|{date,member:((.memberCreator.initials//"")//""),text:(.data.text)})[]'

elif [ "$1" = "card_checklists" ];then shift ##
  card_id="$1"; shift
  output="$(
    curl -s \
      "https://trello.com/1/cards/${card_id}/checklists?key=${trello_key}&token=${trello_token}\
&checkItems=all\
&checkItem_fields=all\
&fields=all\
" \
| jq -r 'map("\(.name) \n\(.checkItems|sort_by(.pos)|map("  \(if (.state=="incomplete") then "( )" else "(v)" end) \(.name)")|join("\n"))")[]' \
    )"

elif [ "$1" = "card_add" ];then shift ##
  list_pattern="$1"; shift
  list_id="$($0 list_name_to_id ${list_pattern})"
  if [[ -z "${list_id}" ]];then
    echo "no matching list id: ${list_id}"
    exit 1
  fi
  card_name="$(echo "$@"|urlencode)"
  shift $#
  if [[ -z "${card_name}" ]];then
    read -e -p "enter new card name: " card_name
    card_name="$(echo "$card_name"|urlencode)"
  fi
  curl -s -XPOST "https://trello.com/1/lists/${list_id}/cards?key=${trello_key}&token=${trello_token}\
&name=${card_name}\
"

#   RESPONSE_JSON=$(curl -s -XPOST "https://trello.com/1/lists/${LANE_ID}/cards?key=$KEY&token=$TRELLO_TOKEN\
# &name=$NAME\
# &labels=yellow\
# &desc=${DESCRIPTION}\
# " )


elif [ "$1" = "card_delete" ];then shift
  card_id="$1"; shift
  curl -s -XDELETE "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

elif [ "$1" = "card_archive" ];then shift ##
  card_id="$1"; shift
  curl -s -XPUT "https://trello.com/1/cards/${card_id}/closed?key=${trello_key}&token=${trello_token}\
&value=true\
"

elif [ "$1" = "card_put_value" ];then shift ##
  card_id="$1"; shift
  key="$1"; shift
  value="$1"; shift
  curl -s -XPUT \
    --data-url "${key}=${value}" \
    "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

elif [ "$1" = "card_name" ];then shift ##
  card_id="$1"; shift
  : ${card_name:="$@"}
  shift $#
  if [[ -z "${card_name}" ]];then
    read -e -p "enter new card name: " card_name
  fi
  card_name="$(echo "${card_name}" | urlencode)"
  curl -s -XPUT \
    -d "name=${card_name}" \
    "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

elif [ "$1" = "card_desc_vipe" ];then shift ##
  card_id="$1"; shift
  $0 card ${card_id} | jq -r '.desc' | vipe | $0 card_desc ${card_id}

elif [ "$1" = "card_desc" ];then shift ##
  card_id="$1"; shift
  if [[ -p /dev/stdin ]]; then
    : ${description:="$(cat)"}
  else
    : ${description:="$@"}
    shift $#
  fi
  description="$(echo "${description}" | urlencode)"
  output="$(curl -s -XPUT \
    -d "desc=${description}" \
    "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}" \
    | jq -r '.id'
  )"

elif [ "$1" = "test" ];then shift
  curl -o /dev/null -w "%{http_code}\n" -s "https://trello.com/1/members/${member}/initials?key=${trello_key}&token=${trello_token}"
  # curl -o /dev/null -i -s "https://trello.com/1/members/${member}/initials?key=${trello_key}&token=${trello_token}"
  # curl -o /dev/null -w "%{http_code}" -i -s "https://trello.com/1/members/${member}?key=${trello_key}&token=${trello_token}"
  exit

elif [[ "$1" == "search" ]];then shift
  query="${@}"
  shift $#
  # https://developers.trello.com/v1.0/reference#search-1
# 'description:"rzsulv009" board:5a9d0959f828736243680d20'

  # -operator - You can add “-” to any operator to do a negative search, such as -has:members to search for cards without any members assigned.
  # @name - Returns cards assigned to a member. If you start typing @, Trello will suggest members for you. member: also works. @me will include only your cards.
  # label: - Returns labeled cards. Trello will suggest labels for you if you start typing a name or color. For example, label:"FIX IT" will return cards with the label named “FIX IT”. #label also works.
  # board:id - Returns cards within a specific board. If you start typing board:, Trello will suggest boards for you. You can search by board name, too, such as “board:trello” to search only cards on boards with trello in the board name.
  # list:name - Returns cards within the list named “name”. Or whatever you type besides “name”.
  # has:attachments - Returns cards with attachments. has:description, has:cover, has:members, and has:stickers also work as you would expect.
  # due:day - Returns cards due within 24 hours. due:week returns cards that are due within the following 7 days. due:month, and due:overdue also work as expected. You can search for a specific day range. For example, adding due:14 to search will include cards due in the next 14 days. You can also search for due:complete or due:incomplete to search for due dates that are marked as complete or incomplete.
  # created:day - Returns cards created in the last 24 hours. created:week and created:month also work as expected. You can search for a specific day range. For example, adding created:14 to the search will include cards created in the last 14 days.
  # edited:day - Returns cards edited in the last 24 hours. edited:week and edited:month also work as expected. You can search for a specific day range. For example, adding edited:21 to the search will include cards edited in the last 21 days.
  # description:, checklist:, comment:, and name: - Returns cards matching the text of card descriptions, checklists, comments, or names. For example, comment:"FIX IT" will return cards with “FIX IT” in a comment.
  # is:open returns open cards. is: archived returns archived cards. If neither is specified, Trello will return both types.
  # is:starred - Only include cards on starred boards.


  : ${limit:="100"}
  : ${fields:="idBoard,idList,shortLink,shortUrl,closed,dateLastActivity,name,desc,badges"}
  : ${type:="cards"} #lists
  # idBoards mine or a comma-separated list of board ids

  curl -s \
    -G \
    --data-url "query=${query}" \
    "https://trello.com/1/search?key=${trello_key}&token=${trello_token}\
&modelTypes=${type}\
&card_fields=${fields}\
&card_limit=${limit}\
" \
  | jq -c '.cards[]'

else
  echo "unknown command: $@" >&2
  exit 1

fi

if [[ "$#" -ne 0 ]];then
  # echo "execute $@" >&2
  echo "$output" | $0 $@
else
  echo "$output"
fi

# elif [ "$1" = "card_to_top" ];then shift
#   CARD_ID=$1; shift
#   [[ -z "$CARD_ID" ]] && { echo "no card id provided"; exit 1; }
#   curl -s -X PUT -d "value=top" "https://trello.com/1/cards/${CARD_ID}/pos?key=$TRELLO_KEY&token=$TRELLO_TOKEN"
#
#
#
