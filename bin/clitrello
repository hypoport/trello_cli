#!/usr/bin/env bash
set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

# https://developers.trello.com/v1.0/reference#cards-nested-resource

while getopts "a:h?" options; do case $options in
  a) a="$OPTARG" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }

: ${a:="default for var a"}
: ${member:="me"}

if [[ "$#" -eq 0 ]];then
  :

elif [ "$1" = "my_cards" ];then
  shift
  : ${card_fields:="due,name,shortLink,shortUrl,idBoard,idList"}
  # : ${card_fields:="all"}
  # &members=false\
  # &member_fields=initials\
  # &actions=commentCard\
  boards_json="$(curl -s "https://trello.com/1/members/${member}/boards?key=${trello_key}&token=${trello_token}&filter=open&lists=open")"
  response_json="$(curl -s "https://trello.com/1/members/${member}/cards?key=${trello_key}&token=${trello_token}\
&visible=open\
&members=true\
&member_fields=initials\
&actions=commentCard\
&fields=${card_fields}\
" \
)"

# | jq -sc 'map(.members=[.members[]?|.initials?])[]' \

  echo "$response_json" \
  | jq --argjson boards "${boards_json}" \
"\
.|group_by(.idBoard)|map(\
  .[0].idBoard as \$boardId\
  |{\
  boardName:(\$boards|map(select(.id==\$boardId)|{name})[0].name),\
  boardLink:(\$boards|map(select(.id==\$boardId)|{shortLink})[0].shortLink),\
  lists:(.|group_by(.idList)|map(\
    .[0].idList as \$listId\
    |{\
    listName:(\
      \$boards|map(select(.id==\$boardId))[0].lists\
      |map(select(.id==\$listId))[0].name\
    ),\
    cards:(\
      map(\
        del(.idBoard)\
        |del(.idList)\
        |del(.id)\
        |.actions=(.actions|map({text:(.data.text),date,memberCreator:(.memberCreator.username)}))\
        |.members=[.members[]?|.initials?] \
      )\
      |sort_by(.due)\
    )\
  }))\
})"

elif [ "$1" = "format_my_cards" ];then
  shift
  $0 my_cards \
  | jq 'map(.lists=(.lists|map(.cards=(.cards|map(select(.actions|contains([{text:"hide",memberCreator:"sinangoo"}])|not))))))' \
  | jq 'map(.lists=(.lists|map( if ( (.cards|length) == 0 ) then empty else . end   )))|map( if ( (.lists|length)==0) then empty else . end )' \
  | jq 'map(.formatted=[]|.formatted+=["\n# <" + .boardLink +  "> " + .boardName]|.formatted+=[(.lists[]|["##            "+.listName,(.cards[]|"* <" + .shortLink + ">   " + (.due//""|sub("T.*$";" ")) + "[" + (.members|join(",")) + "] " + .name )]|.[])])' \
  | jq -r 'map(.formatted)|flatten|.[]'
  echo

elif [ "$1" = "my_boards" ];then
  shift
  response_json="$(curl -s "https://trello.com/1/members/${member}/boards?key=${trello_key}&token=${trello_token}\
&filter=open\
&lists=open\
" \
| jq -c '.[]' \
)"
  echo "$response_json"


elif [ "$1" = "board" ];then
  shift
  board_id=$1
  shift
  response_json="$(curl -s "https://trello.com/1/boards/${board_id}/lists?key=${trello_key}&token=${trello_token}\
&filter=open\
&fields=all\
&cards=open\
&card_fields=all\
")"

  echo "$response_json"

elif [ "$1" = "format_board" ];then
  shift
  board_id=$1
  shift
  $0 board ${board_id} \
    | jq 'map(.formatted=[]|.formatted+=["\n# " + .name]|.formatted+=[(.cards[]|["* <" + .shortLink + ">  " + (.due//""|sub("T.*$";" ")) + "[" + (.idMembers|length|tostring) + "] " + .name]|.[])])' \
  | jq -r 'map(.formatted)|flatten|.[]'
  echo

else
  echo "unknown command: $@" >&2
  exit 1

fi

