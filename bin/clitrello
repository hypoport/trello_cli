#!/usr/bin/env bash
set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

# https://developers.trello.com/v1.0/reference#cards-nested-resource
# &card_limit=100

while getopts "m:f:lecph?" options; do case $options in
  m) member="$OPTARG" ;;
  f) filter="$OPTARG" ;;
  l) show_last_activity=1 ;;
  c) show_closed=1 ;;
  e) show_empty_list=1 ;;
  p) show_pinned=1 ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }

: ${member_array_field:="initials"}
: ${member:="me"}
: ${output:=""}
: ${custom_markdown_fields:=""}

: ${filter:="visible"} # all, closed, none, open, visible
: ${show_pinned:=0} # yes no
: ${show_empty_list:=0} # yes no

: ${show_last_activity:=0} # yes no
: ${show_closed:=0} # yes no
: ${show_comments:=""} # yes no

if [[ "${show_last_activity}" -eq 1 ]];then
  custom_markdown_fields+=" + (.dateLastActivity|sub(\"T.*$\";\" \"))"
fi
if [[ "${show_closed}" -eq 1 ]];then
  custom_markdown_fields+=" + (.closed|tostring) + \" \""
fi

export custom_markdown_fields
export member
export filter
export show_empty_list
export show_pinned

if [[ "$#" -eq 0 ]];then
  :

elif [ "$1" = "board_cards" ];then shift ##
  board_id=$1; shift
  if [[ "$filter" == "visible" ]];then
    export filter="open"
  fi
  #TODO filter also closed lists
  output="$(curl -s "https://trello.com/1/boards/${board_id}/lists?key=${trello_key}&token=${trello_token}\
&filter=open\
&fields=all\
&cards=${filter}\
&card_fields=all\
" \
  | jq -c 'map(.cards)|flatten' \
)"

elif [ "$1" = "boards_markdown" ];then shift ##
  output="$(jq -r 'map("# <\(.shortLink)> `\(.name)`")[]')"

elif [ "$1" = "boards" ];then shift ##
  output="$(curl -s "https://trello.com/1/members/${member}/boards?key=${trello_key}&token=${trello_token}\
&filter=open\
&lists=open\
" \
  | jq -c 'map({id,name,shortLink,lists:(.lists|map({id,name}))})' \
)"

##================================

elif [ "$1" = "_cards_idmembers_to_members" ];then shift
  : ${organization_members="[]"}
  output="$(jq --argjson members "${organization_members}" \
    "map( \
if (has(\"members\")) then \
  . \
else \
  .members=(.idMembers//[]|map(. as \$memberId|\$members|map(select(.id==\$memberId))[]))\
end \
)\
" )"

elif [ "$1" = "_cards_short_json" ];then shift
  output="$(jq -c 'map({id,name,shortLink})')"

elif [ "$1" = "_cards_filter_hidden" ];then shift
  output="$(jq "\
    map(\
      select(\
        .actions//[]\
        |\
        contains([{data:{text:\"hide\"}}])\
        or \
        contains([{data:{text:\"cli_treloo_filter:hide\"}}])\
        |not\
      )\
    )\
    ")"

elif [ "$1" = "_cards_grouped_clear_empty_lists" ];then shift
  output="$(jq 'map(.lists=(.lists|map(if ((.cards|length)==0) then del(.)|empty else . end)))')"

elif [ "$1" = "cards_markdown" ];then shift ##

  commands=""
  if [[ "${show_pinned}" -ne 1 ]];then
    commands+=" _cards_filter_hidden"
  fi
  commands+=" _cards_idmembers_to_members"
  commands+=" _cards_group_by_board"
  if [[ "${show_empty_list}" -ne 1 ]];then
    commands+=" _cards_grouped_clear_empty_lists"
  fi
  commands+=" _cards_grouped_to_markdown"
  $0 $commands

elif [ "$1" = "cards" ];then shift ##
  # : ${card_fields:="due,name,shortLink,shortUrl,idBoard,idList,closed,dateLastActivity"}
  : ${card_fields:="all"}
  output="$(curl -s "https://trello.com/1/members/${member}/cards?key=${trello_key}&token=${trello_token}\
&filter=${filter}\
&members=true\
&member_fields=initials,username\
&actions=commentCard\
&fields=${card_fields}\
")"

elif [ "$1" = "filter_due_date" ];then shift ##
  : ${max_due_date:="$(date +%F)T23:59:59"}
  output="$(
    jq --arg max_due_date "${max_due_date}" 'map(select(.due<=$max_due_date and .due != null))'
  )"

elif [ "$1" = "urgent" ];then shift ##
  max_due_date="$(gdate -d "+ 3 day" +%F)" $0 cards filter_due_date cards_markdown 

elif [ "$1" = "card" ];then shift ##
  card_id="$1"; shift
  output="$(curl -s "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}\
&actions=commentCard\
&checklists=all\
&fields=all\
")"

elif [ "$1" = "comment" ];then shift ##
  card_id="$1"; shift

  if [[ -n "$@" ]]; then
    comment="$@"
    shift $#
  else
    read -p 'enter comment: ' comment
  fi
  output=$(curl \
    -s \
    -X POST \
    -d "text=$comment" \
    "https://trello.com/1/cards/${card_id}/actions/comments?key=${trello_key}&token=${trello_token}" \
    | jq -r '.id'
  )

elif [ "$1" = "_cards_group_by_board" ];then shift
  : ${boards="[]"}
  #TODO sort cards by field
  output="$(jq -c --argjson boards "${boards}" \
"\
. as \$cards |\
.|group_by(.idBoard)|map(\
  .[0].idBoard as \$boardId | \
  {\
    id:\$boardId,\
    name:(\$boards|map(select(.id==\$boardId))|first|.name),\
    shortLink:(\$boards|map(select(.id==\$boardId))|first|.shortLink//\$boardId)\
    ,\
    lists:(\
      if ((\$boards|length)!=0) then \
        (\$boards|map(select(.id==\$boardId))|first|.lists//[])\
        |map(\
          .id as \$idList |\
          .cards=(\$cards|map(select(.idList==\$idList)))\
        )\
      else \
        ( \$cards|map(select(.idBoard==\$boardId))|group_by(.idList)  | \
          map(\
            .[0].idList as \$listId |\
            {\
              id:\$listId,\
              name:\"\",\
              cards:(.)\
            }\
          )\
        ) \
      end \
    )\
  }\
)\
" )"

elif [ "$1" = "_cards_grouped_to_markdown" ];then shift
  output="$(jq -r --arg show_comments "$show_comments" "map(\
.formatted=[]| \
.formatted+=[ \"# <\" + .shortLink + \">    \" + \"\`\" + .name + \"\`\" ] | \
.formatted+=[ \
  (.lists[]| \
    [ \"## <\" + .id + \"> \" + \"\`\" + .name + \"\`\", \
      ( .cards[] | \
        \"* <\" + .shortLink + \">      \" \
        ${custom_markdown_fields} \
        + (if (.members//[]|length)>0 then (\"[\" + (.members//[]|map(.${member_array_field}?)|flatten|join(\",\")) + \"] \") else \"\" end ) \
        + (.due//\"\"|sub(\"T.*$\";\" \")) \
        + (if (.badges.checkItems>0) then ((.badges.checkItemsChecked|tostring) +\"/\" +(.badges.checkItems|tostring) +\" \") else \"\" end ) \
        + (if (.labels|length)>0 then \"(\" + (.labels|map(if .name == \"\" then .color else .name end)|join(\",\"))+ \") \" else \"\" end) \
        + \"\`\"  + .name + \"\`\" \
        + (if ((.actions|length)>0 and (\$show_comments!=\"\")) then \"\\n\" + (.actions|map(select(.type==\"commentCard\")|\"                    \(.date|sub(\"T.*\$\";\"\")) \(.data.text)\")|join(\"\\n\")) else \"\" end) \
      ) \
    ]|.[] \
  ) \
] \
| .formatted+=[ \"\\n\" ] \
)|\
map(.formatted)|flatten|.[]\
" )"

        # + (if (.actions|length)>0 then \"\\n\" + (.actions|map(select(.type==\"commentCard\")|\"                    \(.date|sub(\"T.*\$\";\"\")) \(.data.text)\")|join(\"\\n\")) else \"\" end) \

##================================

elif [ "$1" = "list_cards" ];then shift ##
  list_id="$1"; shift
  if [[ "$filter" == "visible" ]];then
    export filter="open"
  fi
  output="$(curl -s "https://trello.com/1/lists/${list_id}/cards?key=${trello_key}&token=${trello_token}\
&fields=all\
&filter=${filter}\
")"

##================================

elif [ "$1" = "add_card" ];then shift ##
  list_id="$1"; shift
  card_name="$(echo "$@"|urlencode)"
  #TODO shift all
  if [[ -z "${card_name}" ]];then
    read -e -p "enter new card name: " card_name
    card_name="$(echo "$card_name"|urlencode)"
  fi
  curl -s -XPOST "https://trello.com/1/lists/${list_id}/cards?key=${trello_key}&token=${trello_token}\
&name=${card_name}\
"

elif [ "$1" = "_del_card" ];then shift
  card_id="$1"; shift
  curl -s -XDELETE "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

elif [ "$1" = "archive_card" ];then shift ##
  card_id="$1"; shift
  curl -s -XPUT "https://trello.com/1/cards/${card_id}/closed?key=${trello_key}&token=${trello_token}\
&value=true\
"

elif [ "$1" = "_card_name" ];then shift
  card_id="$1"; shift
  output="$(curl -s "https://trello.com/1/cards/${card_id}/name?key=${trello_key}&token=${trello_token}")"

elif [ "$1" = "rename_card" ];then shift ##
  card_id="$1"; shift
  : ${card_name:="$@"}
  #TODO shift all
  if [[ -z "${card_name}" ]];then
    : ${old_name:="$($0 card_name ${card_id} | jq -r ._value )"}
    read -i "${old_name}" -e -p "enter new card name: " card_name
  fi
  card_name="$(echo "${card_name}" | urlencode)"
  curl -s -XPUT \
    -d "name=${card_name}" \
    "https://trello.com/1/cards/${card_id}?key=${trello_key}&token=${trello_token}"

##================================

elif [ "$1" = "_organizations_by_member" ];then shift
  output="$(curl -s "https://trello.com/1/members/${member}/organizations?key=${trello_key}&token=${trello_token}\
&fields=name,displayName\
")"

elif [ "$1" = "_organization_members" ];then shift
  organization_id=$1; shift
  output="$(curl -s "https://trello.com/1/organizations/${organization_id}/members?key=${trello_key}&token=${trello_token}\
&fields=initials,username,fullName,status\
")"

elif [ "$1" = "known_members" ];then shift ##
  output="$(for organization_id in $( $0 _organizations_by_member | jq -r 'map(.id)[]'); do
    $0 _organization_members ${organization_id} | jq -c '.[]'
  done \
    | sort -u \
    | jq -s -c . \
  )"

##================================

else
  echo "unknown command: $@" >&2
  exit 1

fi

if [[ "$#" -ne 0 ]];then
  # echo "execute $@" >&2
  echo "$output" | $0 $@
else
  echo "$output"
fi

